<script>
    function ready() {
        // console.log(document.styleSheets);
        // console.log(document.location);
        var urlParams = new URLSearchParams(window.location.search);
        var prefix = urlParams.get('preview_mode');
        var suffix = "?preview_mode=" + prefix;

        var nodes = document.getElementsByTagName("link");
        var head = document.getElementsByTagName("head").item(0);

        function generateLinkNode(url) {
            var result = document.createElement("link");
            result.setAttribute("rel", "stylesheet");
            result.setAttribute("type", "text/css");
            result.setAttribute("href", url);
            return result;
        }

        for (var i = 0; i < nodes.length; i++) {
            var styleSheet = nodes[i];
            if (styleSheet.href && styleSheet.href.startsWith(document.location.origin) && styleSheet.href.endsWith(".css")) {
                var url = styleSheet.href + suffix;
                var newlink = generateLinkNode(url);
                head.replaceChild(newlink, styleSheet);
            }
        }
    }

    document.addEventListener("DOMContentLoaded", ready);

    (function () {
        var renderApiUrl = "/designer-preview/";

        function getUrl(part) {
            return renderApiUrl + part;
        }

        var app = angular.module("storefrontApp");

        app.controller("previewController", ["$http", '$sce', '$scope', '$window', function ($http, $sce, $scope, $window) {
            $scope.title = "";
            $scope.blocks = []; // html strings

            $window.addEventListener('message', function (e) {
                var data = event.data;
                console.log(data);
                dispatchEvent(data.type, data);
            });

            function dispatchEvent(type, data) {
                // $scope.$apply(function () {
                    clearPreviewItems();
                    switch (type) {
                        case "settings":
                            reloadDocument();
                            break;
                        case "page":
                            /* data = { type: "page", content: { settings: {}, sections: [{}] } } */
                            reloadPage(data.content);
                            break;
                        case "move":
                            var current = $scope.blocks[data.content.currentIndex];
                            $scope.blocks.splice(data.content.currentIndex, 1);
                            $scope.blocks.splice(data.content.newIndex, 0, current);
                            scrollTo(current.id);
                            break;
                        case "addOrUpdate":
                            if (!!data.content) {
                                var model = createBlockModel(data.content);
                                var exists = findById(model.id);
                                if (!exists) {
                                    $scope.blocks.push(model);
                                } else {
                                    $scope.blocks[exists.index] = model;
                                }
                                renderBlock(model, function () {
                                    scrollTo("");
                                });
                            }
                            break;
                        case "remove":
                            var exists = findById(data.content);
                            $scope.blocks.splice(exists.index, 1)
                            break;
                        case "scrollTo":
                            scrollTo(data.content.id);
                            break;
                        default:
                            console.log(type, data);
                            break;
                    }
                // });
            }

            function scrollTo(itemId) {
                var id = "#block-" + itemId;
                var el = $(id);
                if (el.length) {
                    $('html, body').animate({ scrollTop: el.offset().top - window.innerHeight / 3 }, 1000);
                }
            }

            function reloadDocument() {
                document.location.reload();
            }

            function clearPreviewItems() {
                for (var i = 0; i < $scope.blocks.length; i++) {
                    var block = $scope.blocks[i];
                    if (!block.id) {
                        $scope.blocks.splice(i, 1)
                        i--;
                    }
                }
            }

            function reloadPage(page) {
                // { settings, sections }
                $scope.title = page.settings.title;
                $scope.blocks = [];
                for (var i = 0; i < page.sections.length; i++) {
                    var section = page.sections[i];
                    var model = createBlockModel(section);
                    $scope.blocks.push(model);
                }
                renderBlocks();
            }

            function renderBlocks() {
                for (var i = 0; i < $scope.blocks.length; i++) {
                    var block = $scope.blocks[i];
                    renderBlock(block)
                }
            }

            function renderBlock(block, callback) {
                $http.post(getUrl("block"), block.source).then(function (result) {
                    block.result = $sce.trustAsHtml(result.data);
                    if (!!callback) {
                        callback(block);
                    }
                })
            }

            function createBlockModel(section) {
                return {
                    id: section.id,
                    source: section,
                    result: ''
                };
            }

            function findById(id) {
                for (var i = 0; i < $scope.blocks.length; i++) {
                    var block = $scope.blocks[i];
                    if (block.id == id)
                        return { block: block, index: i };
                }
                return null;
            }

        }]);
        //var styles = $("link[rel='stylesheet'][href]");
        //var urlParams = new URLSearchParams(window.location.search);
        //let prefix = urlParams.get('preview_mode');
        //styles.each(function () {
        //    var link = $(this);
        //    var url = link.attr("href");
        //    url = url + (url.indexOf("?") == -1 ? "?" : "&") + "v=" + Date.now() + "&preview_mode=" + prefix;
        //    link.attr("href", url);
        //});
    })();
</script>

{% raw %}

<div class="grid" ng-controller="previewController">

    <div class="grid-item large--two-thirds push--large--one-sixth">

        <h1>{{ title }}</h1>

        <div id="preview-container">
            <div ng-repeat="item in blocks track by item.id" ng-bind-html="item.result" id="block-{{ item.id }}"></div>
        </div>

    </div>

</div>

{% endraw %}
